<?php

namespace Club\BookingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Sabre\VObject\Component\VCalendar;
use Club\UserBundle\Entity\Location;
use Club\BookingBundle\Entity\Field;
use Club\BookingBundle\Entity\Plan;
use Club\BookingBundle\Entity\PlanRepeat;

/**
 * PlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanRepository extends EntityRepository
{
    public function getActive()
    {
        $past = new \DateTime();
        $past->modify('-7 day');

        return $this->createQueryBuilder('p')
            ->join('p.plan_repeats', 'pr')
            ->where('p.updated_at > :past')
            ->andWhere('p.status = :active')
            ->orWhere('p.end > :now')
            ->orWhere('p.repeating = true AND pr.ends_type = :never')
            ->orWhere('p.repeating = true AND pr.ends_type = :after')
            ->orWhere('(p.repeating = true AND pr.ends_type = :on AND pr.ends_on > :now)')
            ->setParameter('active', Plan::STATUS_ACTIVE)
            ->setParameter('past', $past)
            ->setParameter('now', new \DateTime())
            ->setParameter('never', 'never')
            ->setParameter('after', 'after')
            ->setParameter('on', 'on')
            ->getQuery()
            ->getResult()
            ;
    }

    public function getQuery(\DateTime $date)
    {
        $ends_on = clone $date;
        $ends_on->modify('-1 day');

        $qb = $this->createQueryBuilder('p')
            ->select('p,pr')
            ->join('p.fields', 'f')
            ->join('p.plan_repeats', 'pr')
            ->where('p.status = :active')
            ->andWhere('(p.repeating = false) OR (pr.ends_type <> :ends_type) OR (pr.ends_type = :ends_type AND pr.ends_on > :ends_on)')
            ->setParameter('active', Plan::STATUS_ACTIVE)
            ->setParameter('ends_type', 'on')
            ->setParameter('ends_on', $ends_on);

        return $qb;
    }

    public function getVObjectByLocation(Location $location, \DateTime $date)
    {
        $plans = $this->getQuery($date)
            ->andWhere('f.location = :location')
            ->setParameter('location', $location->getId())
            ->getQuery()
            ->getResult();

        return $this->getVObjectFromPlans($plans);
    }

    public function getVObjectByField(Field $field, \DateTime $date)
    {
        $plans = $this->getQuery($date)
            ->andWhere('f.id = :field')
            ->setParameter('field', $field->getId())
            ->getQuery()
            ->getResult();

        return $this->getVObjectFromPlans($plans);
    }

    public function getVObjectFromPlans($plans, Plan $plan=null)
    {
        if ($plan) {
            $plans = array($plan);
        }

        $vcalendar = new VCalendar();

        foreach ($plans as $plan) {
            $this->addEvent($plan, $vcalendar);
        }

        return $vcalendar;
    }

    public function getBetweenByField(Field $field, \DateTime $start, \DateTime $end)
    {
        $vcalendar = $this->getVObjectByField($field, $start);

        return $this->getPlansFromVObject($vcalendar, $start, $end);
    }

    public function getPlansFromVObject($vcalendar, \DateTime $start, \DateTime $end)
    {
        $vcalendar->expand($start, $end);

        $plans = array();
        if (count($vcalendar->VEVENT)) {
            foreach ($vcalendar->VEVENT as $event) {

                $eventStart = $event->DTSTART->getDateTime();
                $eventEnd = $event->DTEND->getDateTime();

                switch (true) {
                case ($eventEnd < $start):
                case ($eventStart > $end):
                    break;
                default:
                    preg_match("/^(\d+)_/", $event->UID, $o);
                    $plan_id = $o[1];
                    $plan = $this->_em->find('ClubBookingBundle:Plan', $plan_id);

                    $s = $plan->getStart();
                    $s->setDate(
                        $eventStart->format('Y'),
                        $eventStart->format('m'),
                        $eventStart->format('d')
                    );
                    $e = $plan->getEnd();
                    $e->setDate(
                        $eventEnd->format('Y'),
                        $eventEnd->format('m'),
                        $eventEnd->format('d')
                    );

                    $plan->setStart($s);
                    $plan->setEnd($e);

                    $plans[] = $plan;
                    break;
                }
            }
        }

        return $plans;
    }

    public function getBetweenByLocation(Location $location, \DateTime $start, \DateTime $end)
    {
        $vcalendar = $this->getVObjectByLocation($location, $start);

        return $this->getPlansFromVObject($vcalendar, $start, $end);
    }

    private function addExceptions(Plan $plan, $vcalendar, $ev)
    {
        if (is_array($plan->getPlanExceptions())) {
            $exDate = $vcalendar->createProperty('EXDATE');
            $dates = array();

            foreach ($plan->getPlanExceptions() as $e) {
                $dates[] = $e->getExcludeDate();
            }

            $exDate->setDateTimes($dates);
            $ev->add($exDate);
        }
    }

    private function addEvent(Plan $plan, $vcalendar)
    {
        $dtStart = $vcalendar->createProperty('DTSTART');
        $dtStart->setDateTime($plan->getStart());

        $dtEnd = $vcalendar->createProperty('DTEND');
        $dtEnd->setDateTime($plan->getEnd());

        $dtStamp = $vcalendar->createProperty('DTSTAMP');
        $dtStamp->setDateTime($plan->getCreatedAt());

        if ($plan->getRepeating()) {
            foreach ($plan->getPlanRepeats() as $repeat) {

                $ev = $vcalendar->createComponent('VEVENT');

                $ev->UID = $repeat->getIcsUid();
                $ev->SUMMARY = $plan->getName();
                $ev->RRULE = $repeat->getIcsFreq();
                $ev->add($dtStart);
                $ev->add($dtEnd);
                $ev->add($dtStamp);

                $this->addExceptions($plan, $vcalendar, $ev);

                $vcalendar->add($ev);
            }

        } else {

            $ev = $vcalendar->createComponent('VEVENT');

            $ev->UID = $plan->getIcsUid();
            $ev->SUMMARY = $plan->getName();
            $ev->add($dtStart);
            $ev->add($dtEnd);
            $ev->add($dtStamp);

            $this->addExceptions($plan, $vcalendar, $ev);

            $vcalendar->add($ev);
        }
    }
}
